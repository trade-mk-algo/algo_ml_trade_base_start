import time
from datetime import date
from urllib.parse import urlsplit, parse_qs
import pyotp
import numpy as np
from fyers_api import fyersModel, accessToken
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from trade_logger.logger import cus_logger


def obtain_access_token(user_record, firefox_driver_path, session):
    """
        This is the program's very first step; it will obtain the request token based on the
        username, password and toptp token.

        login_url = "http://13.127.40.204//api/v2/generate-authcode?client_id=44RM7YTQWY-100&redirect_uri=http://localhost:8080/&esponse_type=code&state=None"
    """

    login_url = "https://api.fyers.in/api/v2/generate-authcode?" \
                + "client_id=" + user_record.api_key \
                + "&redirect_uri=" + session.redirect_uri \
                + "&response_type=" \
                + session.response_type \
                + "&state=None"
    options = Options()
    #options.add_argument("--headless")
    driver = webdriver.Firefox(executable_path=firefox_driver_path, options=options)

    try:
        driver.get(login_url)
        wait = WebDriverWait(driver, 20)
        # Find User id field and set user id, and password
        wait.until(EC.presence_of_element_located((By.XPATH, "//input[@id='fy_client_id']"))) \
            .send_keys(user_record.user_id)

        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='clientIdSubmit']"))).click()
        time.sleep(10)
        time_otp = pyotp.TOTP(user_record.totp).now()

        wait.until(EC.presence_of_element_located((By.XPATH, "//div[@id='otp-container']/input"))) \
            .send_keys(time_otp)

        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='confirmOtpSubmit']"))).click()

        time.sleep(10)

        wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='pin-container']/input"))) \
            .send_keys(user_record.login_pin)

        wait.until(EC.element_to_be_clickable((By.XPATH, "// *[@id ='verifyPinSubmit']"))).click()

        time.sleep(10)

        wait.until(EC.url_contains('code=200'))

    except Exception as exception:
        driver.quit()
        cus_logger.error("Obtaining Access Token for the user(%s) had been failed, Error message %s",
                         user_record.user_id, exception)
    time.sleep(10)
    request_token = parse_qs(urlsplit(driver.current_url).query)['auth_code'][0]
    print(request_token)
    driver.quit()
    return request_token


def create_user_session(user_record, firefox_driver_path):
    """
    This code will generate the accessToken from the api, later will be used to generate the user session
    """
    cus_logger.info("crating the new user session")
    try:
        if (int(date.today().day)) != int(user_record.day):
            session = accessToken.SessionModel(client_id=user_record["api_key"],
                                               secret_key=user_record["api_secret"],
                                               redirect_uri='http://3.111.132.88/',
                                               response_type="code", grant_type="authorization_code")

            request_token = obtain_access_token(user_record, firefox_driver_path, session)
            session.set_token(request_token)
            user_access_token = session.generate_token()
            user_record = update_user_record(user_record, request_token, np.NaN, user_access_token['access_token'])
            kite_connect = generate_user_session(user_record)
        else:
            kite_connect = generate_user_session(user_record)

        return kite_connect, user_record

    except Exception as exception:
        cus_logger.error("creation of user(%s) session  had been failed; Error message %s", (user_record.user_id),
                         exception)


def update_user_record(user_record, request_token, public_token, access_token):
    """
        user record will be updated over here
        :rtype: excel data
    """
    user_record['request_token'] = request_token
    user_record['day'] = int(date.today().day)
    user_record['public_token'] = public_token
    user_record['access_token'] = access_token
    cus_logger.info("updating the user_record")

    return user_record


def generate_user_session(user_record):
    """
        The USER session will be generated by using existing API keys in the system.
    """
    fyers = fyersModel.FyersModel(client_id=user_record["api_key"],
                                  token=user_record['access_token'],
                                  log_path="")

    cus_logger.info("A new user session has been created; the session will be returned.")

    return fyers
