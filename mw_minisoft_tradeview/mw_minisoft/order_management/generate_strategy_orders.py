from mw_minisoft.common_operatinos.common_ops import multi_order_qty_normal_order, super_user_session
from mw_minisoft.instruments_operations.instrument_read_write_operations import read_instrument_tokens
from mw_minisoft.messaging_channel.teligram_channel import *
from mw_minisoft.order_management.order_management__ce_pe import place_instrument_orders

cus_logger.setLevel(10)


def storage_regular_orders(tradeview_data_json):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    inst_df = ticks_indi()
    inst_name_filter = (inst_df.instrument_name == tradeview_data_json['instrument_name'])
    inst_start_name_filter = (inst_df.start_name == tradeview_data_json['start_name'])
    inst_df = inst_df[inst_name_filter & inst_start_name_filter].iloc[-1]
    if inst_df.avail == 'Y':
        inst_strategies_execution(inst_df, tradeview_data_json)
    cus_logger.info('storing regular orders function is completed')


def inst_strategies_execution(inst_record, tradeview_data_json):
    inst_name = inst_record.instrument_name
    inst_name_new = inst_record.instrument_name.replace(':', '_')
    inst_order_file_path = create_indicator_order_file(inst_name_new)
    cus_logger.info('checking order available for the instrument %s', inst_name)
    #exit_time_ = exit_entry_time(inst_name)
    #current_time = datetime.now().time().strftime('%H:%M:%S')
    #before_mkt = current_time < exit_time_
    if file_exists := path.exists(inst_order_file_path):
        inst_order_data_filtered = inst_orders_filtered(inst_order_file_path, inst_record, inst_record.start_name)
        if inst_order_data_filtered.shape[0] > 0:
            inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
            inst_last_order_dir_ = inst_last_order_dir.split('_')[0]
            if 'entry' in inst_last_order_dir:
                inst_exit_order_method(file_exists, inst_record, tradeview_data_json, inst_order_file_path)
                inst_entry_order_method(file_exists, inst_record, tradeview_data_json, inst_order_file_path)
        else:
            inst_entry_order_method(file_exists, inst_record, tradeview_data_json, inst_order_file_path)
    else:
        inst_entry_order_method(file_exists, inst_record, tradeview_data_json, inst_order_file_path)


def inst_orders_filtered(inst_order_file_name, inst_record, strategy_name):
    inst_order_data = pd.read_csv(inst_order_file_name)
    inst_order_data_filtered = inst_order_data[inst_order_data.inst_strategy == strategy_name]
    inst_order_data_filtered = inst_order_data_filtered[
        inst_order_data_filtered.inst_name == inst_record.instrument_name]
    return inst_order_data_filtered


def inst_exit_order_method(file_exists, inst_record, tradeview_data_json, inst_order_file_path):
    if 'up' in tradeview_data_json['entry_type'] or 'buy' in tradeview_data_json['entry_type']:
        if tradeview_data_json['expiry_day'] == 'Y':
            ind_last_record_value = 'up_exit'
        else:
            ind_last_record_value = 'down_exit'
        inst_order_preparation(file_exists, inst_record, tradeview_data_json, ind_last_record_value,
                               inst_order_file_path)
    elif 'down' in tradeview_data_json['entry_type'] or 'sell' in tradeview_data_json['entry_type']:
        if tradeview_data_json['expiry_day'] == 'Y':
            ind_last_record_value = 'down_exit'
        else:
            ind_last_record_value = 'up_exit'
        inst_order_preparation(file_exists, inst_record, tradeview_data_json, ind_last_record_value,
                               inst_order_file_path)


def inst_entry_order_method(file_exists, inst_df, tradeview_data_json, inst_order_file_path):
    if 'up' in tradeview_data_json['entry_type'] or 'buy' in tradeview_data_json['entry_type']:
        ind_last_record_value = 'up_entry'
        inst_order_preparation(file_exists, inst_df, tradeview_data_json, ind_last_record_value, inst_order_file_path)
    elif 'down' in tradeview_data_json['entry_type'] or 'sell' in tradeview_data_json['entry_type']:
        ind_last_record_value = 'down_entry'
        inst_order_preparation(file_exists, inst_df, tradeview_data_json, ind_last_record_value, inst_order_file_path)


def inst_order_preparation(file_exists, inst_record, tradeview_data_json, inst_last_record_dir, inst_order_file_path):
    cus_logger.info('Instrument(%s) order type (%s) available', inst_record.instrument_name, inst_last_record_dir)
    strategy_builder_orders = pd.DataFrame()
    sp_user_session, sp_user_record = super_user_session()
    if file_exists:
        inst_order_record = create_inst_order_record(file_exists, inst_record, tradeview_data_json,
                                                     inst_last_record_dir, inst_order_file_path, sp_user_session)
        inst_order_record_ = strategy_builder_orders.append(inst_order_record, ignore_index=True)
        inst_order_data = pd.read_csv(inst_order_file_path)
        inst_order_data = inst_order_data.append(inst_order_record_.iloc[-1], ignore_index=True)
        inst_order_data.to_csv(inst_order_file_path, index=False)
        send_to_telegram(inst_record, inst_last_record_dir, sp_user_session, inst_order_record, inst_record.start_name, tradeview_data_json)
        place_instrument_orders(inst_record, tradeview_data_json)
        cus_logger.info('appended the new position order into the file')
    else:
        inst_order_record = create_inst_order_record(file_exists, inst_record, tradeview_data_json,
                                                     inst_last_record_dir, inst_order_file_path, sp_user_session)
        strategy_builder_orders = strategy_builder_orders.append(inst_order_record, ignore_index=True)
        strategy_builder_orders.to_csv(inst_order_file_path, index=False)
        send_to_telegram(inst_record, inst_last_record_dir, sp_user_session, inst_order_record, inst_record.start_name, tradeview_data_json)
        place_instrument_orders(inst_record, tradeview_data_json)
        cus_logger.info('created new position order file')


def create_inst_order_record(file_exists, inst_record, tradeview_data_json, ind_last_record_value, inst_order_file_path,
                             sp_user_session):
    inst_name = inst_record.instrument_name
    inst_name_ = inst_record.instrument_name.split(':')[1]
    inst_exchange = inst_record.instrument_name.split(':')[0]
    inst_expiry_date = inst_record.instrument_expiry_date
    future_price = (sp_user_session.quotes({"symbols": inst_record.instrument_trading_symbol}))['d'][0]['v']['lp']
    instrument_details = read_instrument_tokens(inst_name_, future_price, ind_last_record_value, inst_exchange,
                                                inst_expiry_date)
    instrument_details = instrument_details.iloc[-1]
    inst_option_name = instrument_details['Expiry date']
    inst_option_type = instrument_details['Option type']

    if 'exit' in ind_last_record_value:
        order_file = pd.read_csv(inst_order_file_path)
        order_file_ = order_file[order_file.inst_strategy == inst_record.start_name].iloc[-1]
        inst_option_name = order_file_.inst_option_name
        inst_option_type = order_file_.inst_option_type
    multi_order_qty_ = multi_order_qty_normal_order(inst_record, tradeview_data_json)
    return {'inst_date': datetime.now().strftime("%d-%m-%Y %H:%M:00"), 'inst_name': inst_name,
            'inst_strategy': inst_record.start_name, 'inst_price': future_price, 'inst_option_name': inst_option_name,
            'inst_option_type': inst_option_type, 'inst_qty': multi_order_qty_,
            'inst_direction': ind_last_record_value, 'inst_exchange': inst_record.instrument_name.split(':')[0],
            'inst_expiry_date': inst_record.instrument_expiry_date}
